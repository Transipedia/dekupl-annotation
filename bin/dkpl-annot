#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long qw(:config auto_version); # Get options
use Pod::Usage; # Printing pod documentation in terminal
use File::Temp qw/ tempdir /;

use DEkupl;
use DEkupl::GSNAP;
use DEkupl::Contigs;
use DEkupl::ContigsDB;

use DEkupl::Analyzer::BAM;

=head1 SYNOPSIS

dkpl-annot -i index_dir/ merged-diff-counts.tsv.gz

=head1 OPTIONS

=head2 REQUIERED ARGUMENTS

  -c,--contigs STR    merged-diff-counts.tsv.gz (contigs in "{A}_vs_{B}_kmer_counts" 
                      directory from Dekupl-run result)
  -i,--index DIR      path to the index directory (created with dkplannot index)

=head2 OPTIONAL ARGUMENTS

  -o,--output DIR     path to the output directory (default: "DEkupl_annotation/")
  -t,--treads INT     number of threads
  -h,--help           show this help message and exit

=cut

my ($verbose,$man,$help);
my ($contigs_file, $index_dir, $version);
my $output_dir = "DEkupl_annotation";
my $index_name = "GRCh38-chr22";
my $nb_threads = 1;
my $tmp_dir = "/tmp";
my $debug = 1;

GetOptions(
    "v|verbose"        => \$verbose,
    "man"              => \$man,
    "help"             => \$help,
    # Input / Output
    #"c|contigs=s"      => \$contigs_file,
    "o|output=s"       => \$output_dir,
    "i|index=s"        => \$index_dir,
    # Options
    "t|threads=i"      => \$nb_threads,
    "version"          => \$version,
) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1) if ($help);
pod2usage(-verbose => 2) if ($man);

if($version) {
  print STDERR "rankvar2 ", $DEkupl::VERSION, "\n";
  exit 0;
}

$contigs_file = shift;

if(!defined $contigs_file) {
  pod2usage(-verbose => 1, -message => "Missing contig file (-c,--contigs)");
}

if(!defined $index_dir) {
  pod2usage(-verbose => 1, -message => "Missing index directory (-i,--index)");
}

# Create output dir
mkdir $output_dir;

# Create contigs object
my $contigs = DEkupl::Contigs->new(contigs_file => $contigs_file);
my $gsnap = DEkupl::GSNAP->new(
  index_dir => "$index_dir/gsnap",
  index_name => $index_name,
  nb_threads => $nb_threads,
);

# Create FASTA file
my $fasta_file = "$output_dir/contigs.fa.gz";
if(-e $fasta_file && $debug) {
  print STDERR "Skipping FASTA file\n";
} else {
  print STDERR "Generating FASTA file\n";
$contigs->generateFasta($fasta_file);
}


# Generate BAM file
my $bam_file = "$output_dir/contigs.bam";
if(-e $bam_file && $debug) {
  print STDERR "Skipping GSNAP mapping\n";
} else {
  print STDERR "Running GSNAP\n";
  $gsnap->generateBam($fasta_file,$bam_file);
}

# Create contigs DB
#my $tempdir = tempdir(CLEANUP => 1);
my $tempdir = tempdir("$tmp_dir/dkplannot_tmp.XXXXX",CLEANUP => 1);
my $contigs_db = DEkupl::ContigsDB->new(db_folder => $tempdir);
print STDERR "Loading contigs DB into $tempdir\n";
$contigs->loadContigsDB($contigs_db);

print STDERR "Parsing BAM file\n";
my $bam_analyzer = DEkupl::Analyzer::BAM->new(
  contigs_db => $contigs_db,
  bam_file => $bam_file,
);

my @analyzers = ($contigs, $bam_analyzer);

# Print headers
print join("\t",
  map { $_->getHeaders() } @analyzers
),"\n";

# Print values
my $contigs_it = $contigs_db->contigsIterator;
while (my $contig = $contigs_it->()) {
  print join("\t",
    map { $_->getValues($contig) } @analyzers
  ),"\n";
}